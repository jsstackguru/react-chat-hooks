{"version":3,"sources":["config.js","components/Login.js","components/Chat.js","components/App.js","index.js"],"names":["config","appID","apiKey","Login","props","_useState","useState","_useState2","Object","slicedToArray","uidValue","setUidValue","_useState3","_useState4","isSubmitting","setIsSubmitting","react_default","a","createElement","className","onSubmit","event","preventDefault","CometChat","login","then","User","NotificationManager","success","console","log","setUser","error","type","name","placeholder","value","onChange","target","concat","disabled","ChatBox","chat","chatIsLoading","user","react_md_spinner_lib_default","size","map","key","id","receiver","uid","text","FriendList","friends","friendisLoading","selectedFriend","friend","onClick","selectFriend","Chat","_ref","setFriends","setSelectedFriend","_useState5","_useState6","setChat","_useState7","_useState8","setChatIsLoading","_useState9","_useState10","setFriendisLoading","_useState11","_useState12","message","setMessage","useEffect","UsersRequestBuilder","setLimit","build","fetchNext","userList","removeMessageListener","logout","MessagesRequestBuilder","setUID","fetchPrevious","messages","scrollToBottom","addMessageListener","MessageListener","onTextMessageReceived","sender","prevState","toConsumableArray","document","getElementById","scrollIntoView","style","height","overflow","Chat_FriendList","Chat_ChatBox","bottom","width","textMessage","TextMessage","MESSAGE_TYPE","TEXT","RECEIVER_TYPE","USER","sendMessage","title","paddingRight","App","lib","components_Chat","components_Login","init","ReactDOM","render","src_components_App"],"mappings":"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","file":"static/js/main.b8dd0cb4.chunk.js","sourcesContent":["const config = {\n  appID: '845716c5962833',\n  apiKey: 'a9b1446f6334c5ad2d7f3b5707b8bb3886672cd7',\n};\n\nexport default config;\n","import React, {useState} from 'react';\nimport {NotificationManager} from 'react-notifications';\nimport {CometChat} from '@cometchat-pro/chat';\nimport config from '../config';\n\nconst Login = props => {\n  const [uidValue, setUidValue] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    CometChat.login(uidValue, config.apiKey).then(\n      User => {\n        NotificationManager.success('You are now logged in', 'Login Success');\n        console.log('Login Successful:', {User});\n        props.setUser(User);\n      },\n      error => {\n        NotificationManager.error('Please try again', 'Login Failed');\n        console.log('Login failed with exception:', {error});\n        setIsSubmitting(false);\n      }\n    );\n  };\n\n  return (\n    <div className='row'>\n      <div className='col-md-6 login-form mx-auto'>\n        <h3>Login to Awesome Chat</h3>\n        <form className='mt-5' onSubmit={handleSubmit}>\n          <div className='form-group'>\n            <input\n              type='text'\n              name='username'\n              className='form-control'\n              placeholder='Your Username'\n              value={uidValue}\n              onChange={event => setUidValue(event.target.value)}\n            />\n          </div>\n          <div className='form-group'>\n            <input\n              type='submit'\n              className='btn btn-primary btn-block'\n              value={`${isSubmitting ? 'Loading...' : 'Login'}`}\n              disabled={isSubmitting}\n            />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, {useState, useEffect} from 'react';\n\nimport MDSpinner from 'react-md-spinner';\nimport {CometChat} from '@cometchat-pro/chat';\n\nconst MESSAGE_LISTENER_KEY = 'listener-key';\nconst limit = 30;\n\nconst Chat = ({user}) => {\n  const [friends, setFriends] = useState([]);\n  const [selectedFriend, setSelectedFriend] = useState(null);\n  const [chat, setChat] = useState([]);\n  const [chatIsLoading, setChatIsLoading] = useState(false);\n  const [friendisLoading, setFriendisLoading] = useState(true);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    // this useEffect will fetch all users available for chat\n    // only run on mount\n    let usersRequest = new CometChat.UsersRequestBuilder()\n      .setLimit(limit)\n      .build();\n\n    usersRequest.fetchNext().then(\n      userList => {\n        console.log('User list received:', userList);\n        setFriends(userList);\n        setFriendisLoading(false);\n      },\n      error => {\n        console.log('User list fetching failed with error:', error);\n      }\n    );\n\n    return () => {\n      CometChat.removeMessageListener(MESSAGE_LISTENER_KEY);\n      CometChat.logout();\n    };\n  }, []);\n\n  useEffect(() => {\n    // will run when selectedFriend variable value is updated\n    // fetch previous messages, remove listener if any\n    // create new listener for incoming message\n\n    if (selectedFriend) {\n      let messagesRequest = new CometChat.MessagesRequestBuilder()\n        .setUID(selectedFriend)\n        .setLimit(limit)\n        .build();\n\n      messagesRequest.fetchPrevious().then(\n        messages => {\n          setChat(messages);\n          setChatIsLoading(false);\n          scrollToBottom();\n        },\n        error => {\n          console.log('Message fetching failed with error:', error);\n        }\n      );\n\n      CometChat.removeMessageListener(MESSAGE_LISTENER_KEY);\n\n      CometChat.addMessageListener(\n        MESSAGE_LISTENER_KEY,\n        new CometChat.MessageListener({\n          onTextMessageReceived: message => {\n            console.log('Incoming Message Log', {message});\n            if (selectedFriend === message.sender.uid) {\n              setChat(prevState => [...prevState, message]);\n            }\n          },\n        })\n      );\n    }\n  }, [selectedFriend]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    let textMessage = new CometChat.TextMessage(\n      selectedFriend,\n      message,\n      CometChat.MESSAGE_TYPE.TEXT,\n      CometChat.RECEIVER_TYPE.USER\n    );\n\n    CometChat.sendMessage(textMessage).then(\n      message => {\n        console.log('Message sent successfully:', message);\n        setChat([...chat, message]);\n      },\n      error => {\n        console.log('Message sending failed with error:', error);\n      }\n    );\n    setMessage('');\n  };\n\n  const selectFriend = uid => {\n    setSelectedFriend(uid);\n    setChat([]);\n    setChatIsLoading(true);\n  };\n\n  const scrollToBottom = () => {\n    let node = document.getElementById('ccChatBoxEnd');\n    node.scrollIntoView();\n  };\n\n  return (\n    <div className='container-fluid'>\n      <div className='row'>\n        <div className='col-md-2' />\n        <div className='col-md-8 h-100pr border rounded'>\n          <div className='row'>\n            <div className='col-lg-4 col-xs-12 bg-light' style={{height: 658}}>\n              <div className='row p-3'>\n                <h2>Friend List</h2>\n              </div>\n              <div\n                className='row ml-0 mr-0 h-75 bg-white border rounded'\n                style={{height: '100%', overflow: 'auto'}}>\n                <FriendList\n                  friends={friends}\n                  friendisLoading={friendisLoading}\n                  selectedFriend={selectedFriend}\n                  selectFriend={selectFriend}\n                />\n              </div>\n            </div>\n            <div className='col-lg-8 col-xs-12 bg-light' style={{height: 658}}>\n              <div className='row p-3 bg-white'>\n                <h2>Who you gonna chat with?</h2>\n              </div>\n              <div\n                className='row pt-5 bg-white'\n                style={{height: 530, overflow: 'auto'}}>\n                <ChatBox\n                  chat={chat}\n                  chatIsLoading={chatIsLoading}\n                  user={user}\n                />\n              </div>\n              <div className='row bg-light' style={{bottom: 0, width: '100%'}}>\n                <form className='row m-0 p-0 w-100' onSubmit={handleSubmit}>\n                  <div className='col-9 m-0 p-1'>\n                    <input\n                      id='text'\n                      className='mw-100 border rounded form-control'\n                      type='text'\n                      onChange={event => {\n                        setMessage(event.target.value);\n                      }}\n                      value={message}\n                      placeholder='Type a message...'\n                    />\n                  </div>\n                  <div className='col-3 m-0 p-1'>\n                    <button\n                      className='btn btn-outline-secondary rounded border w-100'\n                      title='Send'\n                      style={{paddingRight: 16}}>\n                      Send\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ChatBox = props => {\n  const {chat, chatIsLoading, user} = props;\n  if (chatIsLoading) {\n    return (\n      <div className='col-xl-12 my-auto text-center'>\n        <MDSpinner size='72' />\n      </div>\n    );\n  } else {\n    return (\n      <div className='col-xl-12'>\n        {chat.map(chat => (\n          <div key={chat.id} className='message'>\n            <div\n              className={`${\n                chat.receiver !== user.uid ? 'balon1' : 'balon2'\n              } p-3 m-1`}>\n              {chat.text}\n            </div>\n          </div>\n        ))}\n        <div id='ccChatBoxEnd' />\n      </div>\n    );\n  }\n};\n\nconst FriendList = props => {\n  const {friends, friendisLoading, selectedFriend} = props;\n  if (friendisLoading) {\n    return (\n      <div className='col-xl-12 my-auto text-center'>\n        <MDSpinner size='72' />\n      </div>\n    );\n  } else {\n    return (\n      <ul className='list-group list-group-flush w-100'>\n        {friends.map(friend => (\n          <li\n            key={friend.uid}\n            className={`list-group-item ${\n              friend.uid === selectedFriend ? 'active' : ''\n            }`}\n            onClick={() => props.selectFriend(friend.uid)}>\n            {friend.name}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n};\n\nexport default Chat;\n","import React, {useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-notifications/lib/notifications.css';\nimport './App.css';\nimport {NotificationContainer} from 'react-notifications';\n\nimport Login from './Login';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [user, setUser] = useState(null);\n\n  const renderApp = () => {\n    // Render Chat component when user state is not null\n    if (user) {\n      return <Chat user={user} />;\n    } else {\n      return <Login setUser={setUser} />;\n    }\n  };\n\n  return (\n    <div className='container'>\n      <NotificationContainer />\n      {renderApp()}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {CometChat} from '@cometchat-pro/chat';\n\nimport App from './components/App';\nimport config from './config';\n\nCometChat.init(config.appID);\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}